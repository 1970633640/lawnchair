import org.gradle.api.tasks.wrapper.Wrapper.DistributionType

buildscript {
    ext.kotlin_version = '1.3.11'
    repositories {
        google()
        jcenter()
        maven { url = "https://storage.googleapis.com/r8-releases/raw" }
    }
    dependencies {
        classpath GRADLE_CLASS_PATH
        classpath 'com.android.tools:r8:1.5.62'
        classpath PROTOBUF_CLASS_PATH
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

tasks {
    wrapper {
        gradleVersion = "5.5.1"
        distributionType = DistributionType.ALL
    }
}

final String SUPPORT_LIBS_VERSION = '28.0.0-alpha1'

Properties localProps = new Properties()
File localPropsFile = project.rootProject.file('local.properties')
if (localPropsFile.exists()) {
    localProps.load(localPropsFile.newDataInputStream())
}

def publicBranches = ["alpha", "beta"]
def ciBuild = localProps.getProperty("ciBuild") == "true" || System.getenv("CI_BUILD") == "true"
def isPublicBuild = localProps.getProperty("public") == "true" || (ciBuild && publicBranches.contains(System.getenv("DRONE_BRANCH")))

final String FRAMEWORK_PREBUILTS_DIR = "prebuilts/"

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion 29
    buildToolsVersion BUILD_TOOLS_VERSION

    signingConfigs {
        ci {
            storeFile file("debug.jks")
            storePassword localProps.getProperty("storePass") ?: System.getenv("STORE_PASSWORD")
            keyAlias "Lawnchair"
            keyPassword localProps.getProperty("keyPass") ?:System.getenv("KEY_PASSWORD")
        }
    }
    defaultConfig {
        minSdkVersion 25
        targetSdkVersion 28

        if (ciBuild) {
            def ciBuildNumber = localProps.getProperty("buildNumber") ?: System.getenv("CI_BUILD_NUMBER")
            versionCode = Integer.valueOf(ciBuildNumber)
            def majorMinor = localProps.getProperty("majorMinor") ?: System.getenv("MAJOR_MINOR")
            def drone = localProps.getProperty("public") == "true" || System.getenv("DRONE")
            versionName = majorMinor + (drone ? "-" : ".") + ciBuildNumber
        } else {
            versionCode 1
            versionName "2.0"
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        buildConfigField "boolean", "FEATURE_QUINOA", "true"
        buildConfigField "boolean", "FEATURE_SETTINGS_SEARCH", "true"
        buildConfigField "boolean", "DEBUG_STRICT_MODE", isPublicBuild ? "false" : "true"
        buildConfigField "boolean", "HAS_LEAKCANARY", "false"

        def githubToken = localProps.getProperty('githubToken') ?: '"' + System.getenv("GITHUB_TOKEN") + '"'
        buildConfigField "String", "GITHUB_TOKEN", githubToken

        buildConfigField "boolean", "SIGNATURE_VERIFICATION", "false"

        def debugMenuCode = System.getenv("DEBUG_MENU_CODE") ?: "veryperu"
        buildConfigField "String", "DEBUG_MENU_CODE_HASH", '"' + debugMenuCode.digest('SHA-1') + '"'

        def accuWeatherKey = localProps.getProperty('accu_key') ?: '"' + System.getenv("ACCU_KEY") + '"'
        buildConfigField "String", "ACCUWEATHER_KEY", accuWeatherKey

        ndk {
            abiFilters "armeabi-v7a", "x86", "x86_64", "arm64-v8a"
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            if (ciBuild) {
                if (System.getenv("CI_EVENT_TYPE") != "pull_request") {
                    signingConfig signingConfigs.ci
                }
            }

            dexOptions {
                matchingFallbacks = ['debug']
            }

            buildConfigField "boolean", "HAS_LEAKCANARY", isPublicBuild ? "false" : "true"
        }

        optimized {
            initWith debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard.flags'
            if (ciBuild) {
                if (System.getenv("CI_EVENT_TYPE") != "pull_request") {
                    signingConfig signingConfigs.ci
                }
            }
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard.flags'
            if (ciBuild) {
                if (System.getenv("CI_EVENT_TYPE") != "pull_request") {
                    signingConfig signingConfigs.ci
                }
            }

            dexOptions {
                matchingFallbacks = ['release']
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // The flavor dimensions for build variants (e.g. aospWithQuickstep, aospWithoutQuickstep)
    // See: https://developer.android.com/studio/build/build-variants#flavor-dimensions
    flavorDimensions "app", "recents", "quickstepTarget", "custom", "dist"

    productFlavors {
        aosp {
            dimension "app"
            applicationId 'ch.deletescape.lawnchair'
            testApplicationId 'com.android.launcher3.tests'
        }

        l3go {
            dimension "app"
            applicationId 'com.android.launcher3'
            testApplicationId 'com.android.launcher3.tests'
        }

        withQuickstep {
            dimension "recents"

            minSdkVersion 28
        }

        withQuickstepIconRecents {
            dimension "recents"

            minSdkVersion 28
        }

        withoutQuickstep {
            dimension "recents"
        }

        lawnchair {
            dimension "custom"
        }

        dev {
            dimension "dist"
            // Use v1 dev package name for compatibility testing
            if (localProps.getProperty("v1compat") != "true") {
                applicationIdSuffix ".dev"
            }
            versionNameSuffix "-dev"
        }

        ci {
            dimension "dist"
            applicationIdSuffix ".ci"
            versionNameSuffix "-ci-" + (localProps.getProperty("branch") ?: System.getenv("DRONE_BRANCH"))

            buildConfigField "boolean", "SIGNATURE_VERIFICATION", "true"
        }

        plah {
            dimension "dist"
            applicationIdSuffix ".plah"

            buildConfigField "boolean", "SIGNATURE_VERIFICATION", "true"
        }

        pie {
            dimension "quickstepTarget"
            manifestPlaceholders = [ quickstepTarget: 28, quickstepDirectBootAware: false ]
        }

        ten {
            dimension "quickstepTarget"
            manifestPlaceholders = [ quickstepTarget: 29, quickstepDirectBootAware: true ]
        }
    }

    // Disable release builds for now
    android.variantFilter { variant ->
        if (variant.buildType.name.endsWith('release')) {
            variant.setIgnore(true)
        }

        // Icon recents is Go only
        if (name.contains("WithQuickstepIconRecents") && !name.contains("l3go")) {
            variant.setIgnore(true)
        }
    }

    sourceSets {
        main {
            res.srcDirs = ['res']
            java.srcDirs = ['src', 'src_plugins']
            aidl.srcDirs = ['src']
            assets.srcDirs = ['assets']
            manifest.srcFile 'AndroidManifest-common.xml'
            proto {
                srcDir 'protos/'
                srcDir 'proto_overrides/'
                srcDir 'proto_pixel/'
            }
        }

        debug {
            manifest.srcFile "AndroidManifest.xml"
        }

        optimized {
            manifest.srcFile "AndroidManifest.xml"
        }

        release {
            manifest.srcFile "AndroidManifest.xml"
        }

        androidTest {
            res.srcDirs = ['tests/res']
            java.srcDirs = ['tests/src', 'tests/tapl']
            manifest.srcFile "tests/AndroidManifest-common.xml"
        }

        androidTestDebug {
            manifest.srcFile "tests/AndroidManifest.xml"
        }

        aosp {
            java.srcDirs = ['src_flags', 'src_shortcuts_overrides']
            manifest.srcFile "AndroidManifest.xml"
        }

        l3go {
            res.srcDirs = ['go/res']
            java.srcDirs = ['go/src']
            manifest.srcFile "go/AndroidManifest.xml"
        }

        withoutQuickstep {
            java.srcDirs = ['src_ui_overrides']
        }

        withQuickstep {
            res.srcDirs = ['quickstep/res', 'quickstep/recents_ui_overrides/res']
            java.srcDirs = ['quickstep/src', 'quickstep/recents_ui_overrides/src']
            manifest.srcFile "quickstep/AndroidManifest.xml"
        }

        withQuickstepIconRecents {
            res.srcDirs = ['quickstep/res', 'go/quickstep/res']
            java.srcDirs = ['quickstep/src', 'go/quickstep/src']
            manifest.srcFile "quickstep/AndroidManifest.xml"
        }

        lawnchair {
            res.srcDirs = ['lawnchair/res']
            java.srcDirs = ['lawnchair/src']
            manifest.srcFile "lawnchair/AndroidManifest.xml"
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs.add('-Xbootclasspath/p:prebuilts/libs/framework.jar')
        }
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.resValue 'string', 'application_id', variant.applicationId
    }
}

apply from: 'lawnchair/smali.gradle'

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
    }
}

dependencies {
    implementation "androidx.dynamicanimation:dynamicanimation:${ANDROID_X_VERSION}"
    implementation "androidx.cardview:cardview:${ANDROID_X_VERSION}"
    implementation "androidx.recyclerview:recyclerview:${ANDROID_X_VERSION}"
    implementation "androidx.preference:preference:${ANDROID_X_VERSION}"
    implementation "androidx.palette:palette:${ANDROID_X_VERSION}"
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "com.google.android.material:material:1.0.0"
    implementation project(':IconLoader')
    implementation fileTree(dir: "${FRAMEWORK_PREBUILTS_DIR}/libs", include: 'launcher_protos.jar')

    // Recents lib dependency
    withQuickstepImplementation project(':SystemUISharedLib')

    // Recents lib dependency for Go
    withQuickstepIconRecentsImplementation project(':SystemUISharedLib')

    // Required for AOSP to compile. This is already included in the sysui_shared.jar
    implementation fileTree(dir: "${FRAMEWORK_PREBUILTS_DIR}/libs", include: 'plugin_core.jar')

    implementation 'com.github.florent37:fiftyshadesof:1.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.github.KwabenBerko:OpenWeatherMap-Android-Library:2.0.1'
    implementation 'com.github.LawnchairLauncher:chroma:1.2.6'
    implementation 'com.github.LawnchairLauncher:hoko-lite:4e0d797'
    implementation('com.github.LawnchairLauncher:attribouter-y:0.1.6') {
        // The "MaterialButton" styleable defines an attr named iconSize which breaks compatibility with our source base
        exclude group: 'com.android.support', module: 'design'
    }
    implementation 'com.github.bumptech.glide:glide:4.8.0'

    implementation 'com.github.topjohnwu.libsu:core:2.5.0'
    implementation 'eu.chainfire:librootjava:1.3.0'
    implementation 'com.luckycatlabs:SunriseSunsetCalculator:1.2'
    implementation 'me.mvdw.recyclerviewmergeadapter:recyclerviewmergeadapter:2.1.0'
    implementation 'com.squareup.retrofit2:retrofit:2.6.0'
    implementation 'com.squareup.okhttp3:okhttp:4.0.0-RC1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.0.0-RC1'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.0'

    implementation 'me.xdrop:fuzzywuzzy:1.2.0'

    lawnchairImplementation files('lawnchair/libs/sesame-lib.aar')

    // TODO: add LeakCanary back
    implementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation "org.mockito:mockito-core:1.9.5"
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.0'
    androidTestImplementation 'com.android.support.test:rules:1.0.0'
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    androidTestImplementation "androidx.annotation:annotation:${ANDROID_X_VERSION}"
}

protobuf {
    // Configure the protoc executable
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0-alpha-3'

        generateProtoTasks {
            all().each { task ->
                task.builtins {
                    remove java
                    javanano {
                        option "java_package=launcher_log_extension.proto|com.android.launcher3.userevent.nano"
                        option "java_package=launcher_log.proto|com.android.launcher3.userevent.nano"
                        option "java_package=launcher_dump.proto|com.android.launcher3.model.nano"
                        option "java_package=search.proto|com.google.android.apps.nexuslauncher.search.nano"
                        option "java_package=smartspace.proto|com.google.android.apps.nexuslauncher.smartspace.nano"
                        option "enum_style=java"
                    }
                }
            }
        }
    }
}

apply plugin: 'kotlin-android-extensions'
